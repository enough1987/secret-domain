AWSTemplateFormatVersion: "2010-09-09"
Description: RDS Only Stack

Resources:
  # VPC for your infrastructure
  SDNVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Public subnet A for the application
  SDNPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SDNVPC
      CidrBlock: 172.31.49.0/24
      AvailabilityZone: eu-central-1a

  # Public subnet B for the application
  SDNPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SDNVPC
      CidrBlock: 172.31.48.0/24
      AvailabilityZone: eu-central-1b

  # Public route table for the subnet
  SDNPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SDNVPC

  # Route to allow internet access from the subnet
  SDNPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SDNPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SDNInternetGateway

  # Internet Gateway for VPC
  SDNInternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach Internet Gateway to VPC
  SDNVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SDNVPC
      InternetGatewayId: !Ref SDNInternetGateway

  # Associate both public subnets with the public route table
  SDNSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SDNPublicSubnetA
      RouteTableId: !Ref SDNPublicRouteTable

  SDNSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SDNPublicSubnetB
      RouteTableId: !Ref SDNPublicRouteTable

  # Security group for RDS instance (allow access from anywhere for dev/testing)
  SDNRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public access to RDS
      VpcId: !Ref SDNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 # For dev/testing only

  # RDS subnet group for the database
  SDNRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !Ref SDNPublicSubnetA
        - !Ref SDNPublicSubnetB

  # RDS PostgreSQL instance for backend database
  SDNRDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    DependsOn:
      - SDNRDSSubnetGroup
    Properties:
      DBInstanceIdentifier: !Sub sdn-postgres-${AWS::AccountId}-${AWS::Region}
      AllocatedStorage: "20"
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "16.3"
      MasterUsername: masteruser
      MasterUserPassword: masterpassword
      VPCSecurityGroups:
        - !GetAtt SDNRDSSecurityGroup.GroupId
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref SDNRDSSubnetGroup

Outputs:
  RDSInstanceEndpoint:
    Value: !GetAtt SDNRDS.Endpoint.Address
    Description: RDS PostgreSQL endpoint

  RDSSecurityGroupId:
    Value: !Ref SDNRDSSecurityGroup
    Description: Security Group ID for RDS
