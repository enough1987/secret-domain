AWSTemplateFormatVersion: "2010-09-09"
Description: Fullstack App Infrastructure

Resources:
  # VPC for your infrastructure
  SDNVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: sdn-vpc

  # Internet Gateway for VPC
  SDNInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: sdn-internet-gateway

  # Attach Internet Gateway to VPC
  SDNVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn:
      - SDNVPC
      - SDNInternetGateway
    Properties:
      VpcId: !Ref SDNVPC
      InternetGatewayId: !Ref SDNInternetGateway

  # Public subnet A for the application
  SDNPublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: SDNVPC
    Properties:
      VpcId: !Ref SDNVPC
      CidrBlock: 172.31.49.0/24
      AvailabilityZone: eu-central-1a
      Tags:
        - Key: Name
          Value: sdn-public-subnet-a

  # Public subnet B for the application
  SDNPublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: SDNVPC
    Properties:
      VpcId: !Ref SDNVPC
      CidrBlock: 172.31.48.0/24
      AvailabilityZone: eu-central-1b
      Tags:
        - Key: Name
          Value: sdn-public-subnet-b

  # Public route table for the subnet
  SDNPublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: SDNVPC
    Properties:
      VpcId: !Ref SDNVPC
      Tags:
        - Key: Name
          Value: sdn-public-route-table

  # Route to allow internet access from the subnet
  SDNPublicRoute:
    Type: AWS::EC2::Route
    DependsOn:
      - SDNPublicRouteTable
      - SDNInternetGateway
      - SDNVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref SDNPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SDNInternetGateway

  # Associate both public subnets with the public route table
  SDNSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SDNPublicSubnetA
      - SDNPublicRouteTable
      - SDNPublicRoute
    Properties:
      SubnetId: !Ref SDNPublicSubnetA
      RouteTableId: !Ref SDNPublicRouteTable

  SDNSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn:
      - SDNPublicSubnetB
      - SDNPublicRouteTable
      - SDNPublicRoute
    Properties:
      SubnetId: !Ref SDNPublicSubnetB
      RouteTableId: !Ref SDNPublicRouteTable

  # RDS subnet group for the database
  SDNRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - SDNPublicSubnetA
      - SDNPublicSubnetB
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !Ref SDNPublicSubnetA
        - !Ref SDNPublicSubnetB
      Tags:
        - Key: Name
          Value: sdn-rds-subnet-group

  # Security group for EC2 instance (allows SSH, HTTPS, HTTP)
  SDNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: SDNVPC
    Properties:
      GroupDescription: Enable HTTPS for users, HTTP for AWS services, and SSH for admins
      VpcId: !Ref SDNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sdn-ec2-sg

  # Security group for RDS instance (allow EC2 access and your IP)
  SDNRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SDNVPC
      - SDNSecurityGroup
    Properties:
      GroupDescription: Allow EC2 and public access to RDS
      VpcId: !Ref SDNVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SDNSecurityGroup.GroupId
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sdn-rds-sg

  # RDS PostgreSQL instance for backend database
  SDNRDS:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    DependsOn:
      - SDNRDSSubnetGroup
      - SDNPublicSubnetA
      - SDNPublicSubnetB
      - SDNPublicRouteTable
      - SDNPublicRoute
      - SDNSubnetRouteTableAssociationA
      - SDNSubnetRouteTableAssociationB
      - SDNRDSSecurityGroup
    Properties:
      DBInstanceIdentifier: !Sub sdn-postgres-${AWS::AccountId}-${AWS::Region}
      AllocatedStorage: "20" # GB
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: "16.3" # <-- Use a valid version for your region!
      MasterUsername: masteruser # <-- Change for production
      MasterUserPassword: masterpassword # <-- Use Secrets Manager for production!
      VPCSecurityGroups:
        - !GetAtt SDNRDSSecurityGroup.GroupId
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref SDNRDSSubnetGroup
      Tags:
        - Key: Name
          Value: sdn-postgres

  # S3 bucket for static frontend hosting
  SDNBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub sdn-frontend-csr-${AWS::AccountId}-${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub sdn-frontend-csr-${AWS::AccountId}-${AWS::Region}

  # EC2 instance for backend deployment
  SDNEC2Instance:
    Type: AWS::EC2::Instance
    DeletionPolicy: Delete
    DependsOn:
      - SDNPublicSubnetA
      - SDNSecurityGroup
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c1b03e30bca3b373
      KeyName: ec2Key
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SDNPublicSubnetA
          GroupSet:
            - !Ref SDNSecurityGroup
      Tags:
        - Key: Name
          Value: sdn-ec2-instance

  # EC2 instance for frontend deployment (Next.js)
  SDNFrontendNextEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0c1b03e30bca3b373 # Use a suitable Node.js AMI
      KeyName: ec2Key
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId: !Ref SDNPublicSubnetA
          GroupSet:
            - !Ref SDNSecurityGroup
      Tags:
        - Key: Name
          Value: frontend-next-ec2-instance

  # ECR repository for backend Docker images
  SDNECR:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub sdn-backend-${AWS::AccountId}-${AWS::Region}
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the most recent image",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": { "type": "expire" }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: sdn-backend-ecr

  SDNFrontendNextECR:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    Properties:
      RepositoryName: !Sub sdn-frontend-next-${AWS::AccountId}-${AWS::Region}
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only the most recent image",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 1
                },
                "action": { "type": "expire" }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: sdn-frontend-next-ecr

  # Security group for EC2 instance (allows SSH, HTTPS, HTTP)
  SDNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPS for users, HTTP for AWS services, and SSH for admins
      VpcId: !Ref SDNVPC
      SecurityGroupIngress:
        # SSH access (restrict in production!)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTPS for public users
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # HTTP for CloudFront (allow from anywhere)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: sdn-ec2-sg

  # Security group for RDS instance (allow EC2 access and your IP)
  SDNRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn: SDNVPC
    Properties:
      GroupDescription: Allow EC2 and public access to RDS
      VpcId: !Ref SDNVPC
      SecurityGroupIngress:
        # Allow EC2 access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SDNSecurityGroup.GroupId
        # Allow access from anywhere (dev/testing only!)
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0 # <-- Only for dev/testing! Use your IP for production.
      Tags:
        - Key: Name
          Value: sdn-rds-sg

  # RDS subnet group for the database
  SDNRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DependsOn:
      - SDNPublicSubnetA
      - SDNPublicSubnetB
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !Ref SDNPublicSubnetA
        - !Ref SDNPublicSubnetB
      Tags:
        - Key: Name
          Value: sdn-rds-subnet-group

  # Bucket policy to allow CloudFront to access S3 bucket (OAC)
  SDNBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn:
      - SDNBucket
      - SDNCloudFront
    Properties:
      Bucket: !Ref SDNBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::sdn-frontend-csr-${AWS::AccountId}-${AWS::Region}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${SDNCloudFront}

  SDNOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: OAC-SDN
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront distribution for CDN and custom domain
  SDNCloudFront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - SDNRDS
      - SDNBucket
      - SDNEC2Instance
      - SDNFrontendNextEC2Instance
      - SDNOAC
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          # S3 origin for static frontend
          - DomainName: !Sub "${SDNBucket}.s3.${AWS::Region}.amazonaws.com"
            Id: S3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SDNOAC
          # EC2 origin for backend API
          - DomainName: !GetAtt SDNEC2Instance.PublicDnsName
            Id: ApiOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
          # EC2 origin for frontend (Next.js)
          - DomainName: !GetAtt SDNFrontendNextEC2Instance.PublicDnsName
            Id: SDNFrontendNextOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true # <-- Enable compression here
        CacheBehaviors:
          # Route /api/* requests to backend API (EC2)
          - PathPattern: /api
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          - PathPattern: /api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          # Route /next/* requests to frontend (Next.js)
          - PathPattern: /next
            TargetOriginId: SDNFrontendNextOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          - PathPattern: /next/*
            TargetOriginId: SDNFrontendNextOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
          - PathPattern: /_next/*
            TargetOriginId: SDNFrontendNextOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:876528174456:certificate/f87820f7-3923-4a46-9b72-d47885df1b17
          SslSupportMethod: sni-only
        Aliases:
          - secret-domain.net
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
        Restrictions:
          GeoRestriction:
            RestrictionType: whitelist
            Locations:
              - BG   # Bulgaria
              - UA   # Ukraine
        Logging:
          Bucket: sdn-cloudfront-logs
          Prefix: logs/
          IncludeCookies: true                        # Optional: log cookies

  # ACM certificate for custom domain (must be validated manually in AWS Console)
  SDNCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: secret-domain.net
      ValidationMethod: DNS

  SDNRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: "secret-domain.net."   # <-- Make sure the trailing dot is present
      Name: "secret-domain.net."             # <-- Use subdomain if needed, e.g. www.secret-domain.net.
      Type: A
      AliasTarget:
        DNSName: !GetAtt SDNCloudFront.DomainName
        HostedZoneId: Z2FDTNDATAQYW2         # <-- This is always the CloudFront hosted zone ID (global)

Outputs:
  S3BucketName:
    Value: !Ref SDNBucket
    Description: S3 bucket for frontend

  EC2InstanceId:
    Value: !Ref SDNEC2Instance
    Description: EC2 instance for backend

  ECRRepositoryName:
    Value: !Ref SDNECR
    Description: ECR repository for backend Docker images

  CloudFrontDistributionId:
    Value: !Ref SDNCloudFront
    Description: CloudFront distribution for frontend

  CloudFrontDomainName:
    Value: !GetAtt SDNCloudFront.DomainName
    Description: CloudFront distribution domain name

  RDSInstanceEndpoint:
    Value: !GetAtt SDNRDS.Endpoint.Address
    Description: RDS PostgreSQL endpoint

  EC2PublicIP:
    Value: !GetAtt SDNEC2Instance.PublicIp
    Description: Public IP address of EC2 instance

  EC2PublicDNS:
    Value: !GetAtt SDNEC2Instance.PublicDnsName
    Description: Public DNS name of EC2 instance

  S3WebsiteURL:
    Value: !GetAtt SDNBucket.WebsiteURL
    Description: S3 static website endpoint

  VPCId:
    Value: !Ref SDNVPC
    Description: VPC ID

  PublicSubnetAId:
    Value: !Ref SDNPublicSubnetA
    Description: Public Subnet A ID

  PublicSubnetBId:
    Value: !Ref SDNPublicSubnetB
    Description: Public Subnet B ID

  EC2SecurityGroupId:
    Value: !Ref SDNSecurityGroup
    Description: Security Group ID for EC2

  RDSSubnetGroupSubnets:
    Value: !Join [",", [!Ref SDNPublicSubnetA, !Ref SDNPublicSubnetB]]
    Description: Subnet IDs used for RDS subnet group

  RDSSecurityGroupId:
    Value: !Ref SDNRDSSecurityGroup
    Description: Security Group ID for RDS
# How to delete the stack if needed
# aws s3 rm s3://sdn-frontend-876528174456-eu-central-1 --recursive --region eu-central-1
# aws ecr batch-delete-image --repository-name sdn-backend-876528174456-eu-central-1 --image-ids $(aws ecr list-images --repository-name sdn-backend-876528174456-eu-central-1 --query 'imageIds[*]' --output json) --region eu-central-1
# aws rds delete-db-instance --db-instance-identifier sdn-postgres-876528174456-eu-central-1 --region eu-central-1 --skip-final-snapshot
# aws cloudformation delete-stack --stack-name sdn-stack --region eu-central-1
# aws cloudformation wait stack-delete-complete --stack-name sdn-stack --region eu-central-1
