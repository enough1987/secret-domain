AWSTemplateFormatVersion: "2010-09-09"
Description: Fullstack App Infrastructure

Resources:
  # VPC for your infrastructure
  SecretDomainNetVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  # Internet Gateway for VPC
  SecretDomainNetInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  # Attach Internet Gateway to VPC
  SecretDomainNetVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SecretDomainNetVPC
      InternetGatewayId: !Ref SecretDomainNetInternetGateway

  # Public subnet A for the application (eu-north-1a)
  SecretDomainNetPublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecretDomainNetVPC
      CidrBlock: 172.31.49.0/24
      AvailabilityZone: eu-north-1a

  # Public subnet B for the application (eu-north-1b)
  SecretDomainNetPublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecretDomainNetVPC
      CidrBlock: 172.31.48.0/24
      AvailabilityZone: eu-north-1b

  # S3 bucket for static frontend hosting
  SecretDomainNetBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: secret-domain-net-frontend
      Tags:
        - Key: Name
          Value: secret-domain-net-frontend

  # EC2 instance for backend deployment
  SecretDomainNetEC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3.micro
      ImageId: ami-09278528675a8d54e
      KeyName: ec2Key
      SecurityGroupIds:
        - !Ref SecretDomainNetSecurityGroup
      SubnetId: !Ref SecretDomainNetPublicSubnetA # Place EC2 in public subnet A

  # Elastic IP for EC2 instance (for public access)
  SecretDomainNetEC2EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Associate Elastic IP with EC2 instance
  SecretDomainNetEC2EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      InstanceId: !Ref SecretDomainNetEC2Instance
      EIP: !Ref SecretDomainNetEC2EIP

  # ECR repository for backend Docker images
  SecretDomainNetECR:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: secret-domain-net-backend

  # RDS PostgreSQL instance for backend database
  SecretDomainNetRDS:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: secret-domain-net-postgres
      AllocatedStorage: 20 # GB
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 17.5 # <-- Use the exact version from the AWS Console
      MasterUsername: masteruser # <-- Change for production
      MasterUserPassword: masterpassword # <-- Use Secrets Manager for production!
      VPCSecurityGroups:
        - !GetAtt SecretDomainNetRDSSecurityGroup.GroupId
      PubliclyAccessible: true
      BackupRetentionPeriod: 7
      StorageType: gp2
      MultiAZ: false
      DBSubnetGroupName: !Ref SecretDomainNetRDSSubnetGroup

  # Security group for EC2 instance (allows SSH, HTTPS, HTTP)
  SecretDomainNetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTPS for users, HTTP for AWS services, and SSH for admins
      VpcId: !Ref SecretDomainNetVPC
      SecurityGroupIngress:
        # SSH access (restrict in production!)
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        # HTTPS for public users
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        # HTTP for CloudFront (allow from anywhere)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security group for RDS instance (allow EC2 access and your IP)
  SecretDomainNetRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow EC2 access to RDS
      VpcId: !Ref SecretDomainNetVPC
      SecurityGroupIngress:
        # Allow EC2 access
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt SecretDomainNetSecurityGroup.GroupId
        # Allow access from your local computer
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 130.185.237.31/32 # <-- Replace with your actual public IP

  # CloudFront distribution for CDN and custom domain
  SecretDomainNetCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          # S3 origin for static frontend
          - DomainName: !Sub "${SecretDomainNetBucket}.s3.eu-north-1.amazonaws.com"
            Id: S3Origin
            S3OriginConfig: {}
            OriginAccessControlId: !Ref SecretDomainNetOAC
          # EC2 origin for backend API
          - DomainName: !GetAtt SecretDomainNetEC2Instance.PublicDnsName
            Id: ApiOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true # <-- Enable compression here
        CacheBehaviors:
          # Route /api/* requests to backend API (EC2)
          - PathPattern: /api/*
            TargetOriginId: ApiOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            CachedMethods: [GET, HEAD, OPTIONS]
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:876528174456:certificate/f87820f7-3923-4a46-9b72-d47885df1b17
          SslSupportMethod: sni-only
        Aliases:
          - secret-domain.net
        CustomErrorResponses:
          - ErrorCode: 404
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0
          - ErrorCode: 403
            ResponsePagePath: /index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 0

  # ACM certificate for custom domain (must be validated manually in AWS Console)
  SecretDomainNetCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: secret-domain.net
      ValidationMethod: DNS

  # Public route table for the subnet
  SecretDomainNetPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecretDomainNetVPC

  # Route to allow internet access from the subnet
  SecretDomainNetPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref SecretDomainNetPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SecretDomainNetInternetGateway

  # Associate both public subnets with the public route table
  SecretDomainNetSubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecretDomainNetPublicSubnetA
      RouteTableId: !Ref SecretDomainNetPublicRouteTable

  SecretDomainNetSubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SecretDomainNetPublicSubnetB
      RouteTableId: !Ref SecretDomainNetPublicRouteTable

  # RDS subnet group for the database
  SecretDomainNetRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Public subnet group for RDS
      SubnetIds:
        - !Ref SecretDomainNetPublicSubnetA
        - !Ref SecretDomainNetPublicSubnetB

  # Bucket policy to allow CloudFront to access S3 bucket (OAC)
  SecretDomainNetBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SecretDomainNetBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: arn:aws:s3:::secret-domain-net-frontend/*
            Condition:
              StringEquals:
                AWS:SourceArn: arn:aws:cloudfront::876528174456:distribution/E4KCLSTALFBTD

  SecretDomainNetOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: OAC-SecretDomainNet
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Outputs:
  S3BucketName:
    Value: !Ref SecretDomainNetBucket
    Description: S3 bucket for frontend

  EC2InstanceId:
    Value: !Ref SecretDomainNetEC2Instance
    Description: EC2 instance for backend

  EC2ElasticIP:
    Value: !Ref SecretDomainNetEC2EIP
    Description: Elastic IP for EC2 instance

  ECRRepositoryName:
    Value: !Ref SecretDomainNetECR
    Description: ECR repository for backend Docker images

  CloudFrontDistributionId:
    Value: !Ref SecretDomainNetCloudFront
    Description: CloudFront distribution for frontend

  RDSInstanceEndpoint:
    Value: !GetAtt SecretDomainNetRDS.Endpoint.Address
    Description: RDS PostgreSQL endpoint
# Example GitHub Actions deploy step (not part of CloudFormation template)
# - name: Deploy CloudFormation stack
#   run: |
#     aws cloudformation deploy \
#       --template-file infrastructure.yml \
#       --stack-name secret-domain-net-stack \
#       --capabilities CAPABILITY_NAMED_IAM \
#       --region eu-north-1
#   env:
#     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#     AWS_REGION: ${{ secrets.AWS_REGION }}

# How to delete the stack if needed
# aws cloudformation delete-stack --stack-name secret-domain-net-stack --region eu-north-1
# aws cloudfront delete-origin-access-control --id OAC-SecretDomainNet
